# encoding: utf-8
class LatexToPdf
<<<<<<< HEAD:lib/latex_to_pdf.rb
  @@options = { tex_path: '/usr/bin', tex_engine: 'pdflatex', parse_twice: false }
=======
  def self.config
    @config||={:command => 'pdflatex', :arguments => ['-halt-on-error'], :parse_twice => false}
  end

  # Converts a string of LaTeX +code+ into a binary string of PDF.
  #
  # pdflatex is used to convert the file and creates the directory +#{Rails.root}/tmp/rails-latex/+ to store intermediate
  # files.
  #
  # The config argument defaults to LatexToPdf.config but can be overridden using @latex_config.
  #
  # The parse_twice argument is deprecated in favor of using config[:parse_twice] instead.
  def self.generate_pdf(code,config,parse_twice=nil)
    config=self.config.merge(config)
    parse_twice=config[:parse_twice] if parse_twice.nil?
    dir=File.join(Rails.root,'tmp','rails-latex',"#{Process.pid}-#{Thread.current.hash}")
    input=File.join(dir,'input.tex')
    FileUtils.mkdir_p(dir)
    # copy any additional supporting files (.cls, .sty, ...)
    supporting = config[:supporting]
    if supporting.class == String or supporting.class == Array and supporting.length > 0
      FileUtils.cp(supporting, dir)
    end
    File.open(input,'wb') {|io| io.write(code) }
    Process.waitpid(
      fork do
        begin
          Dir.chdir dir
          STDOUT.reopen("input.log","a")
          STDERR.reopen(STDOUT)
          args=config[:arguments] + %w[-shell-escape -interaction batchmode input.tex]
          system config[:command],'-draftmode',*args if parse_twice
          exec config[:command],*args
        rescue
          File.open("input.log",'a') {|io|
            io.write("#{$!.message}:\n#{$!.backtrace.join("\n")}\n")
          }
        ensure
          Process.exit! 1
        end
      end)
    if File.exist?(pdf_file=input.sub(/\.tex$/,'.pdf'))
      FileUtils.mv(input.sub(/\.tex$/,'.log'),File.join(dir,'..','input.log'))
      result=File.read(pdf_file)
      FileUtils.rm_rf(dir)
    else
      raise "pdflatex failed: See #{input.sub(/\.tex$/,'.log')} for details"
    end
    result
  end
>>>>>>> upstream/master:lib/rails-latex/latex_to_pdf.rb

  class << self
    # Converts a string of LaTeX +code+ into a binary string of PDF.
    #
    # pdflatex is used to convert the file and creates the directory +#{Rails.root}/tmp/rails-latex+ to store intermediate
    # files.
    def generate_pdf(code, options = {})
      options.reverse_merge! @@options

      dir   = File.join(Rails.root, 'tmp', 'rails-latex', "#{Process.pid}-#{Thread.current.hash}")
      input = File.join(dir, 'input.tex')
      FileUtils.mkdir_p(dir)

      File.open(input, 'wb') {|io| io.write(code) }
      tex_command = File.join( options[:tex_path], options[:tex_engine] )
      raise "LaTeX command '#{tex_command}' not found" unless File.exist?(tex_command)

      (options[:parse_twice] ? 2 : 1).times {
        output = `PATH=#{options[:tex_path]} #{tex_command} -output-directory #{dir} -interaction nonstopmode #{input} 2>&1`
        raise "#{options[:tex_command]} error: #{output}" if output.include?("Error")
        # :umask => 7, :out => :close, :err => :close, :in => :close) # not supported in ruby 1.8
      }

      if File.exist? log_file = input.sub(/\.tex$/, '.log')
        FileUtils.mv(log_file, File.join(dir, '..', 'input.log') )
      else
        raise "#{options[:tex_command]} failed: Log file #{log_file} not found."
      end

      if File.exist?( pdf_file = input.sub(/\.tex$/, '.pdf') )
        result = File.read(pdf_file)
        FileUtils.rm_rf(dir)
      else
        raise "#{options[:tex_command]} failed: See #{input.sub(/\.tex$/, '.log')} for details"
      end
      result
    end

    # Escapes LaTex special characters in text so that they wont be interpreted as LaTex commands.
    #
    # This method will use RedCloth to do the escaping if available.
    def escape_latex(text)
      # :stopdoc:
      unless @latex_escaper
        if defined?(RedCloth::Formatters::LATEX)
          class << (@latex_escaper=RedCloth.new(''))
            include RedCloth::Formatters::LATEX
          end
        else
          class << (@latex_escaper=Object.new)
            ESCAPE_RE=/([{}_$&%#])|([\\^~|<>])/
            ESC_MAP={
              '\\' => 'backslash',
              '^' => 'asciicircum',
              '~' => 'asciitilde',
              '|' => 'bar',
              '<' => 'less',
              '>' => 'greater',
            }

            def latex_esc(text)   # :nodoc:
              text.gsub(ESCAPE_RE) {|m|
                if $1
                  "\\#{m}"
                else
                  "\\text#{ESC_MAP[m]}{}"
                end
              }
            end
          end
        end
        # :startdoc:
      end

      @latex_escaper.latex_esc(text.to_s).html_safe
    end

<<<<<<< HEAD:lib/latex_to_pdf.rb
    def settings
      @@options
    end

    def settings=(options_hash)
      @@options.merge! options_hash
    end
=======
    @latex_escaper.latex_esc(text.to_s).html_safe
>>>>>>> upstream/master:lib/rails-latex/latex_to_pdf.rb
  end
end
